#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("single-chat-room:server");
const http = require("http");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const { Server } = require("socket.io");
const io = new Server(server);

/* export */ const onlines = new Map();
//welcome a new user
io.on("connection", (socket) => {
	// Set sockets id so they can send back the id together with their username
	socket.emit("status", { id: socket.id });

	// Listening for the user to register id with their username
	socket.on("register-id", (info) => {
		onlineStatus = {
			username: info.username,
			online: true,
		};
		onlines.forEach((onlineInfo, id) => {
			if (onlineInfo.username === info.username) {
				onlines.delete(info.socketId);
			}
		});
		onlines.set(info.socketId, onlineStatus);
		// Lets others know that this user is now online
		socket.broadcast.emit("online", onlineStatus);
	});

	// To Check for the users currently online at the start of their own application so they can
	// adequately show those online.
	socket.on("onlines", (callback) => {
		const onlinesArr = [];
		onlines.forEach((onlineInfo) => {
			onlinesArr.push(onlineInfo);
		});
		// setTimeout(() => {
		return callback({
			onlinesArr,
		});
		// }, 2000);
	});

	socket.on("chatMessage", (message) => {
		socket.broadcast.emit("message", message);
	});

	//runs when a user leaves the chat
	socket.on("disconnect", () => {
		console.log("Disconnect", socket.id);
		for (let [id, onlineInfo] of onlines) {
			if (id === socket.id) {
				onlineStatus = {
					username: onlineInfo.username,
					online: false,
				};
				// Informs others then they go offline so they can show appropriately
				io.emit("online", onlineStatus);
				onlines.delete(id);
				continue;
			}
		}
		// io.emit("message", "user hass left the chat");
	});
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	const port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== "listen") {
		throw error;
	}

	const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case "EACCES":
			console.error(bind + " requires elevated privileges");
			process.exit(1);
			break;
		case "EADDRINUSE":
			console.error(bind + " is already in use");
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = server.address();
	const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
	debug("Listening on " + bind);
}
